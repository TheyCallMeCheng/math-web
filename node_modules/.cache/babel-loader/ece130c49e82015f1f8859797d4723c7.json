{"ast":null,"code":"'use strict';\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\n\n\nfunction findLinks(node, links = []) {\n  for (const key in node) {\n    const val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        });\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    const cid = CID.asCID(val);\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      });\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  async function links(cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n\n    if (cid.code === raw.code) {\n      return [];\n    }\n\n    if (cid.code === dagPb.code) {\n      return node.Links;\n    }\n\n    if (cid.code === dagCbor.code) {\n      return findLinks(node);\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.code}`);\n  }\n\n  return withTimeoutOption(links);\n};","map":{"version":3,"sources":["/Users/marianionutcioancaradu/Documents/mathBlocks_web/mathblocks-web/node_modules/ipfs-core/src/components/object/links.js"],"names":["dagPb","require","dagCbor","raw","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","Name","Tsize","Hash","parse","_","cid","asCID","Array","isArray","module","exports","repo","codecs","options","codec","getCodec","code","block","blocks","get","decode","Links","Error"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,yBAAD,CAAnB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAUH,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASK,SAAT,CAAoBC,IAApB,EAA0BC,KAAK,GAAG,EAAlC,EAAsC;AACpC,OAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,UAAMG,GAAG,GAAGH,IAAI,CAACE,GAAD,CAAhB;;AAEA,QAAIA,GAAG,KAAK,GAAR,IAAeE,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,KAA6B,CAAhD,EAAmD;AACjD,UAAI;AACFL,QAAAA,KAAK,CAACM,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAE,EADG;AAETC,UAAAA,KAAK,EAAE,CAFE;AAGTC,UAAAA,IAAI,EAAEb,GAAG,CAACc,KAAJ,CAAUR,GAAV;AAHG,SAAX;AAKA;AACD,OAPD,CAOE,OAAOS,CAAP,EAAU,CACV;AACD;AACF;;AAED,UAAMC,GAAG,GAAGhB,GAAG,CAACiB,KAAJ,CAAUX,GAAV,CAAZ;;AAEA,QAAIU,GAAJ,EAAS;AACPZ,MAAAA,KAAK,CAACM,IAAN,CAAW;AACTC,QAAAA,IAAI,EAAE,EADG;AAETC,QAAAA,KAAK,EAAE,CAFE;AAGTC,QAAAA,IAAI,EAAEG;AAHG,OAAX;AAKA;AACD;;AAED,QAAIE,KAAK,CAACC,OAAN,CAAcb,GAAd,CAAJ,EAAwB;AACtBJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;;AAED,QAAIE,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClCJ,MAAAA,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;AACD;AACF;;AAED,SAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAgB,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AACrC;AACF;AACA;AACE,iBAAenB,KAAf,CAAsBY,GAAtB,EAA2BQ,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAP,CAAgBV,GAAG,CAACW,IAApB,CAApB;AACA,UAAMC,KAAK,GAAG,MAAMN,IAAI,CAACO,MAAL,CAAYC,GAAZ,CAAgBd,GAAhB,EAAqBQ,OAArB,CAApB;AACA,UAAMrB,IAAI,GAAGsB,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAb;;AAEA,QAAIZ,GAAG,CAACW,IAAJ,KAAa5B,GAAG,CAAC4B,IAArB,EAA2B;AACzB,aAAO,EAAP;AACD;;AAED,QAAIX,GAAG,CAACW,IAAJ,KAAa/B,KAAK,CAAC+B,IAAvB,EAA6B;AAC3B,aAAOxB,IAAI,CAAC6B,KAAZ;AACD;;AAED,QAAIhB,GAAG,CAACW,IAAJ,KAAa7B,OAAO,CAAC6B,IAAzB,EAA+B;AAC7B,aAAOzB,SAAS,CAACC,IAAD,CAAhB;AACD;;AAED,UAAM,IAAI8B,KAAJ,CAAW,mCAAkCjB,GAAG,CAACW,IAAK,EAAtD,CAAN;AACD;;AAED,SAAO1B,iBAAiB,CAACG,KAAD,CAAxB;AACD,CAzBD","sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst raw = require('multiformats/codecs/raw')\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    if (cid.code === raw.code) {\n      return []\n    }\n\n    if (cid.code === dagPb.code) {\n      return node.Links\n    }\n\n    if (cid.code === dagCbor.code) {\n      return findLinks(node)\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.code}`)\n  }\n\n  return withTimeoutOption(links)\n}\n"]},"metadata":{},"sourceType":"script"}