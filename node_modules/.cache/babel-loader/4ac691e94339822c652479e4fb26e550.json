{"ast":null,"code":"'use strict';\n\nconst last = require('it-last');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @param {Object} config\n * @param {ReturnType<typeof import('./add-all')>} config.addAll\n */\n\n\nmodule.exports = ({\n  addAll\n}) =>\n/**\n * @type {import('ipfs-core-types/src/pin').API[\"add\"]}\n */\n(path, options = {}) => {\n  let iter;\n  const cid = CID.asCID(path);\n\n  if (cid) {\n    iter = addAll([{\n      cid,\n      ...options\n    }], options);\n  } else {\n    iter = addAll([{\n      path: path.toString(),\n      ...options\n    }], options);\n  } // @ts-ignore return value of last can be undefined\n\n\n  return last(iter);\n};","map":{"version":3,"sources":["/Users/marianionutcioancaradu/Documents/mathBlocks_web/mathblocks-web/node_modules/ipfs-core/src/components/pin/add.js"],"names":["last","require","CID","module","exports","addAll","path","options","iter","cid","asCID","toString"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD;AACf;AACF;AACA;AACE,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,KAAwB;AACtB,MAAIC,IAAJ;AAEA,QAAMC,GAAG,GAAGP,GAAG,CAACQ,KAAJ,CAAUJ,IAAV,CAAZ;;AAEA,MAAIG,GAAJ,EAAS;AACPD,IAAAA,IAAI,GAAGH,MAAM,CAAC,CAAC;AACbI,MAAAA,GADa;AAEb,SAAGF;AAFU,KAAD,CAAD,EAGTA,OAHS,CAAb;AAID,GALD,MAKO;AACLC,IAAAA,IAAI,GAAGH,MAAM,CAAC,CAAC;AACbC,MAAAA,IAAI,EAAEA,IAAI,CAACK,QAAL,EADO;AAEb,SAAGJ;AAFU,KAAD,CAAD,EAGTA,OAHS,CAAb;AAID,GAfqB,CAiBtB;;;AACA,SAAOP,IAAI,CAACQ,IAAD,CAAX;AACD,CAvBH","sourcesContent":["'use strict'\n\nconst last = require('it-last')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @param {Object} config\n * @param {ReturnType<typeof import('./add-all')>} config.addAll\n */\nmodule.exports = ({ addAll }) =>\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"add\"]}\n   */\n  (path, options = {}) => {\n    let iter\n\n    const cid = CID.asCID(path)\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options)\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options)\n    }\n\n    // @ts-ignore return value of last can be undefined\n    return last(iter)\n  }\n"]},"metadata":{},"sourceType":"script"}