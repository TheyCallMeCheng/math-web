{"ast":null,"code":"var _jsxFileName = \"/Users/marianionutcioancaradu/Documents/mathBlocks_web/mathblocks-web/src/components/Mint.js\",\n    _s = $RefreshSig$();\n\nimport Web3 from 'web3';\nimport abiDecoder from 'abi-decoder';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BigNumber = require(\"bignumber.js\"); //Contract declaration and init\n\n\nconst contract_abi = require('./abi.json'); //To change during deployment\n\n\nconst web3 = new Web3(\"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"); //To change during deployment\n\nconst contractAddr = \"0x1130753c69717efa1aa8450005e026788810bcd6\"; //To change during deployment\n\nfunction Mint() {\n  _s();\n\n  abiDecoder.addABI(contract_abi);\n  var contract = new web3.eth.Contract(contract_abi, web3.utils.toChecksumAddress(contractAddr));\n  const [input, setInput] = useState(1);\n\n  async function sendMint() {\n    console.log(\"It's working! \");\n    console.log(\"Input = \" + input); //Get the ethereum account\n\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    console.log(accounts[0]);\n    let mintPrice = await contract.methods.getPrice().call();\n    mintPrice = mintPrice * input; //We must calculate the price * the minting number\n\n    console.log(\"Mint price= \" + mintPrice);\n    const mint = await contract.methods.mint(BigNumber(input));\n    var encodedABI = mint.encodeABI(); //To remove during deployment\n\n    console.log(\"Account: \" + accounts[0]);\n    console.log(\"gas: 141179\");\n    console.log(\"Data: \" + encodedABI);\n    var tx = {\n      from: accounts[0],\n      to: web3.utils.toChecksumAddress(contractAddr),\n      //gas: \"141179\", Not needed, metamask will do the job\n      data: encodedABI,\n      //gasPrice: web3.utils.toWei(\"10\", 'Gwei'), Not needed too\n      value: web3.utils.toHex(mintPrice) // value must be sent in hex\n\n    }; //this function tells Metamask to sign the transaction with the data (variable tx)\n\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [tx]\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mint-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"centered\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: process.env.PUBLIC_URL + 'GenA3.png',\n        style: {\n          height: 500\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Synthetic Noise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), \"Minting starts on: 20 sept 2021\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"1\",\n          class: \"input-field\",\n          value: input,\n          onInput: e => setInput(e.target.value),\n          placeholder: \"1\",\n          min: \"1\",\n          max: \"25\",\n          style: {\n            padding: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Mint\",\n          name: \"Mint\",\n          text: \"mint\",\n          class: \"mint-button\",\n          onClick: sendMint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"s-text\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"center2\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Synthetic Noise is an algorithmically-generated media collection, based on mathematical functions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), \"The artificial DNA is formulated on a set of mathematical functions, some of them are well known, because of this we introduce: Noise.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), \"Noise gives us caos and rapresents the Entropy of the universe. Holding SN will give you access to the first NFT Marketplace on Arbitrum.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Mint, \"RWw0rjBJDGRvjxcnRXCQ/ioFlvE=\");\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Users/marianionutcioancaradu/Documents/mathBlocks_web/mathblocks-web/src/components/Mint.js"],"names":["Web3","abiDecoder","useState","React","BigNumber","require","contract_abi","web3","contractAddr","Mint","addABI","contract","eth","Contract","utils","toChecksumAddress","input","setInput","sendMint","console","log","accounts","window","ethereum","request","method","mintPrice","methods","getPrice","call","mint","encodedABI","encodeABI","tx","from","to","data","value","toHex","txHash","params","process","env","PUBLIC_URL","height","e","target","padding"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport abiDecoder from 'abi-decoder'\nimport { useState } from 'react';\nimport React from 'react';\nconst BigNumber = require(\"bignumber.js\");\n\n\n//Contract declaration and init\nconst contract_abi = require('./abi.json'); //To change during deployment\nconst web3 = new Web3(\"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"); //To change during deployment\nconst contractAddr = \"0x1130753c69717efa1aa8450005e026788810bcd6\"; //To change during deployment\n\n\nfunction Mint(){\n\n    abiDecoder.addABI(contract_abi);\n    var contract = new web3.eth.Contract(\n        contract_abi,       \n        web3.utils.toChecksumAddress(contractAddr)\n    );\n    const [input, setInput] = useState(1);\n\n    async function sendMint(){\n\n        console.log(\"It's working! \");\n        console.log(\"Input = \" + input);\n\n        //Get the ethereum account\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        console.log(accounts[0]);\n\n        let mintPrice = await contract.methods.getPrice().call();\n        mintPrice = mintPrice * input; //We must calculate the price * the minting number\n        console.log(\"Mint price= \" + mintPrice);\n\n        const mint = await contract.methods.mint(\n            BigNumber(input)\n        );\n        var encodedABI = mint.encodeABI();\n        \n        //To remove during deployment\n        console.log(\"Account: \" + accounts[0]);\n        console.log(\"gas: 141179\");\n        console.log(\"Data: \" + encodedABI);\n\n        var tx = {\n            from: accounts[0],\n            to: web3.utils.toChecksumAddress(contractAddr),\n            //gas: \"141179\", Not needed, metamask will do the job\n            data: encodedABI,\n            //gasPrice: web3.utils.toWei(\"10\", 'Gwei'), Not needed too\n            value: web3.utils.toHex(mintPrice) // value must be sent in hex\n        }\n        //this function tells Metamask to sign the transaction with the data (variable tx)\n        const txHash = await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [tx],\n          });\n    }\n\n    return(\n        <div id=\"mint-page\">\n            <div class=\"centered\">\n                <img src={process.env.PUBLIC_URL + 'GenA3.png'} style={{height: 500}}  />\n                <p>\n                <h1>Synthetic Noise</h1>\n                Minting starts on: 20 sept 2021\n                </p>\n                <div class=\"container-input\">\n                    <input type=\"number\" step=\"1\" class=\"input-field\" value={input} onInput={e => setInput(e.target.value)} placeholder=\"1\" min=\"1\" max=\"25\" style={{padding: \"10px\", }}></input>\n                    <input type=\"button\" value=\"Mint\" name=\"Mint\" text=\"mint\" class=\"mint-button\" onClick={sendMint}></input>\n                </div>\n\n                \n            </div>\n            <div id=\"s-text\" >\n            <div class=\"center2\">\n                <p>\n                    Synthetic Noise is an algorithmically-generated media collection, based on mathematical functions.\n                    <br />\n                    The artificial DNA is formulated on a set of mathematical functions, some of them are well known, because of this\n                    we introduce: Noise.\n                    <br />\n                    Noise gives us caos and rapresents the Entropy of the universe.\n                    Holding SN will give you access to the first NFT Marketplace on Arbitrum.\n                </p>\n            </div>\n        </div>\n      </div>\n    );\n}\n\nexport default Mint;"]},"metadata":{},"sourceType":"module"}